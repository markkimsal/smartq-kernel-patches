From 221a0f38a9bbb0c5f2ff3fb01c45c134b8b9be7a Mon Sep 17 00:00:00 2001
From: gqwang <gqwang@hhcn.com>
Date: Wed, 2 Sep 2009 11:21:13 +0800
Subject: [PATCH] Add cpu frequency driver

---
 arch/arm/Kconfig                     |    2 +-
 arch/arm/mach-tcc8900/tcc_ckc_ctrl.c |   58 ++++++++++++++++
 arch/arm/plat-tcc/Makefile           |    1 +
 arch/arm/plat-tcc/tcc_cpufreq.c      |  126 ++++++++++++++++++++++++++++++++++
 4 files changed, 186 insertions(+), 1 deletions(-)
 create mode 100644 arch/arm/plat-tcc/tcc_cpufreq.c

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index d969ba7..2e50389 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -1047,7 +1047,7 @@ endmenu
 
 menu "CPU Power Management"
 
-if (ARCH_SA1100 || ARCH_INTEGRATOR || ARCH_OMAP || ARCH_IMX || ARCH_PXA)
+if (ARCH_SA1100 || ARCH_INTEGRATOR || ARCH_OMAP || ARCH_IMX || ARCH_PXA || ARCH_TCC)
 
 source "drivers/cpufreq/Kconfig"
 
diff --git a/arch/arm/mach-tcc8900/tcc_ckc_ctrl.c b/arch/arm/mach-tcc8900/tcc_ckc_ctrl.c
index 4ccb8cd..b940eae 100644
--- a/arch/arm/mach-tcc8900/tcc_ckc_ctrl.c
+++ b/arch/arm/mach-tcc8900/tcc_ckc_ctrl.c
@@ -354,6 +354,64 @@ static void init_copychangeclock(unsigned int lbusvalue)
 	lpSelfRefresh();
 }
 
+void memchange(unsigned int freq)
+{
+    volatile PLCDC      pLCDC_BASE0 = (volatile PLCDC)tcc_p2v(HwLCDC0_BASE);
+    volatile PLCDC      pLCDC_BASE1 = (volatile PLCDC)tcc_p2v(HwLCDC1_BASE);
+    volatile PTIMER     pTIMER  = (volatile PTIMER)tcc_p2v(HwTMR_BASE);
+
+    // Off LCD
+    pLCDC_BASE1->LCTRL &= ~Hw0;
+    pLCDC_BASE0->LCTRL &= ~Hw0;
+
+    int_alldisable();
+    local_flush_tlb_all();
+    flush_cache_all();
+
+    pTIMER->TC32EN &= ~Hw24;
+
+    retstack = arm_changestack();
+
+    init_copychangeclock(freq);
+
+    arm_restorestack(retstack);
+
+    pTIMER->TC32EN |= Hw24;
+
+    int_restore();
+
+        //      LCDC Power Up
+    pLCDC_BASE0->LCTRL |= Hw0;
+    pLCDC_BASE1->LCTRL |= Hw0;
+}
+
+int tcc_ckc_change_cpu(unsigned int cpuvalue)
+{
+        unsigned int i, validFlag;
+
+        int_alldisable();
+
+        for(i = 0; i < FCORE_STEP_NUM; i++)
+        {
+            if(cpuvalue == FcoreStepValue[i]) {
+                validFlag = 1;
+                break;
+            }
+        }
+
+        if(validFlag == 1)
+        {
+            // Change pll
+            if(tca_ckc_getpll(0) != FcorePllValue[i])
+                tca_ckc_setpll(FcorePllValue[i],0);
+            tca_ckc_setcpu(FcoreDividerValue[i]);
+        }
+        int_restore();
+
+        return validFlag == 1 ? 0 : 1;
+}
+EXPORT_SYMBOL(tcc_ckc_change_cpu);
+
 void ckc_set_peri(struct ckc_ioctl st)
 {
     int_alldisable();
diff --git a/arch/arm/plat-tcc/Makefile b/arch/arm/plat-tcc/Makefile
index 31ec77d..56f01a9 100644
--- a/arch/arm/plat-tcc/Makefile
+++ b/arch/arm/plat-tcc/Makefile
@@ -7,4 +7,5 @@
 #endif
 #
 obj-$(CONFIG_DPM) 		+= tcc_dpm.o
+obj-$(CONFIG_CPU_FREQ)		+= tcc_cpufreq.o
 
diff --git a/arch/arm/plat-tcc/tcc_cpufreq.c b/arch/arm/plat-tcc/tcc_cpufreq.c
new file mode 100644
index 0000000..e35c189
--- /dev/null
+++ b/arch/arm/plat-tcc/tcc_cpufreq.c
@@ -0,0 +1,126 @@
+/****************************************************************
+ * $ID: tcc_cpufreq.c   四, 27  8月 2009 11:39:10 +0800  root $ *
+ *                                                              *
+ * Description:  CPU frequency scaling for TCC8902              *
+ *                                                              *
+ * Maintainer:  (Guoqiang Wang)  <gqwang@hhcn.com>              *
+ *                                                              *
+ * CopyRight (c)  2009  HHTech                                  *
+ *   www.hhcn.com, www.hhcn.org                                 *
+ *   All rights reserved.                                       *
+ *                                                              *
+ * This file is free software;                                  *
+ *   you are free to modify and/or redistribute it   	        *
+ *   under the terms of the GNU General Public Licence (GPL).   *
+ *                                                              *
+ * Last modified: 五, 28  8月 2009 14:07:23 +0800     by root #
+ ****************************************************************/
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/cpufreq.h>
+#include <linux/delay.h>
+#include <linux/init.h>
+#include <linux/err.h>
+#include <linux/clk.h>
+#include <asm/io.h>
+#include <asm/system.h>
+#include <linux/tcc_ioctl.h>
+
+#define KHZ_T		1000
+
+extern unsigned int tca_ckc_getcpu(void);
+extern int tcc_ckc_change_cpu(unsigned int cpuvalue);
+
+/* frequency */
+static struct cpufreq_frequency_table tcc8902_freq_table[] = {
+	{0, 600000},
+	{1, 506250},
+	{2, 405000},
+	{3, 303750},
+	{4, 202500},
+	{5, 101500},
+	{6, 54000},
+	{0, CPUFREQ_TABLE_END},
+};
+
+int tcc8902_verify_speed(struct cpufreq_policy *policy)
+{
+	if (policy->cpu)
+		return -EINVAL;
+	return cpufreq_frequency_table_verify(policy, tcc8902_freq_table);
+}
+
+unsigned int tcc8902_getspeed(unsigned int cpu)
+{
+	unsigned long rate;
+
+	if (cpu)
+		return 0;
+
+	//rate = clk_get_rate(mpu_clk) / KHZ_T;
+	printk("!!!tcc8902_getspeed\n");
+	rate = tca_ckc_getcpu() / 10;
+
+	return rate;
+}
+
+static int tcc8902_target(struct cpufreq_policy *policy,
+		       unsigned int target_freq,
+		       unsigned int relation)
+{
+	struct cpufreq_freqs freqs;
+	int ret = 0;
+	unsigned long arm_clk;
+	unsigned int index;
+
+	freqs.old = tca_ckc_getcpu() / 10;
+	if (cpufreq_frequency_table_target(policy, tcc8902_freq_table, target_freq, relation, &index))
+		return -EINVAL;
+
+	arm_clk = tcc8902_freq_table[index].frequency;
+	freqs.new = arm_clk;
+	freqs.cpu = 0;
+
+	if(freqs.new == freqs.old)
+		return 0;
+
+	cpufreq_notify_transition(&freqs, CPUFREQ_PRECHANGE);
+	ret = tcc_ckc_change_cpu(freqs.new * 10);
+	//ret = clk_set_rate(mpu_clk, freqs.new * KHZ_T);
+	if(ret != 0)
+		printk("frequency scaling error\n");
+
+	cpufreq_notify_transition(&freqs, CPUFREQ_POSTCHANGE);
+	return ret;
+}
+
+static int __init tcc8902_cpu_init(struct cpufreq_policy *policy)
+{
+	if (policy->cpu != 0)
+		return -EINVAL;
+	policy->cur = tca_ckc_getcpu() / 10;
+	cpufreq_frequency_table_get_attr(tcc8902_freq_table, policy->cpu);
+	policy->cpuinfo.transition_latency = KHZ_T;	//1us
+
+	return cpufreq_frequency_table_cpuinfo(policy, tcc8902_freq_table);
+}
+
+static struct cpufreq_driver tcc8902_driver = {
+	.flags		= CPUFREQ_STICKY,
+	.verify		= tcc8902_verify_speed,
+	.target		= tcc8902_target,
+	.get		= tcc8902_getspeed,
+	.init		= tcc8902_cpu_init,
+	.name		= "tcc8902",
+	.owner		= THIS_MODULE,
+};
+
+static int __init tcc8902_cpufreq_init(void)
+{
+	return cpufreq_register_driver(&tcc8902_driver);
+}
+
+late_initcall(tcc8902_cpufreq_init);
+
+/****************** End Of File: tcc_cpufreq.c ******************/
-- 
1.6.3.3

